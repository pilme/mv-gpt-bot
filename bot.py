import logging
import threading
import os

from enum import Enum
from telegram import *
from telegram.ext import *
from langdetect import detect_langs
from openai import OpenAI
from http.server import BaseHTTPRequestHandler, HTTPServer

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# gpt-4-0125-preview
# gpt-3.5-turbo-0125
GPT_MODEL_TYPE = "gpt-3.5-turbo-0125"
APP_HOST = '0.0.0.0'
APP_PORT = 8000


class GetHandler(BaseHTTPRequestHandler):
    def _set_headers(self):
        self.send_response(204)
        self.end_headers()

    def do_GET(self):
        self._set_headers()


def run_server(handler_class=GetHandler):
    server_address = (APP_HOST, APP_PORT)
    httpd = HTTPServer(server_address, handler_class)
    httpd.serve_forever()


KEY_GPT_HISTORY = "key_gpt_history"
GPT_INITIAL_CONVERSATION_HISTORY = [{"role": "system",
                                     "content": "–¢—ã –∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω—ã–π –≤ –≤–µ–∂–ª–∏–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ "
                                                "–ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –ª—é–±–æ–µ —è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ –ø—Ä–æ—Å—Ç—ã–º–∏ "
                                                "—Å–ª–æ–≤–∞–º–∏. –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢–µ–±—è –∑–æ–≤—É—Ç –ê–Ω–∞—Ç–æ–ª–∏–π. "
                                                "–¢–µ–±—è —Å–æ–∑–¥–∞–ª–∞ –ú–∞—Ä–∏—è –í–æ—Ä–æ–Ω–æ–≤–∞ –≤ —Ä–∞–º–∫–∞—Ö —à–∫–æ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ 7 –∞–ø—Ä–µ–ª—è 2024 "
                                                "–≥–æ–¥–∞."}]
GPT_INITIAL_ASSISTANT_HISTORY = [{"role": "system",
                                  "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ç–∫–æ, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, –±–µ–∑ –ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–π –∏ "
                                             "—Ç–æ–ª—å–∫–æ –ø–æ-—Ä—É—Å—Å–∫–∏"}]


class Button:
    TRANSLATION = "–ü–µ—Ä–µ–≤–æ–¥"
    TEXT_CHECK = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—à–∏–±–∫–∏"
    CONVERSATION = "–°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º"
    BACK = "–ù–∞–∑–∞–¥"
    JOKE = "–®—É—Ç–∫–∏"


class BotMessages:
    GREETINGS = "ü§ñ–ü—Ä–∏–≤–µ—Ç, —è —Ç—É–ø–æ–≤–∞—Ç—ã–π –±–æ—Ç"
    STATE_STARTED = "ü§ñ–ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    STATE_TRANSLATION = "ü§ñ–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç –∏ —è –µ–≥–æ –ø–µ—Ä–µ–≤–µ–¥—É"
    STATE_TRANSLATION_CONTINUE = "ü§ñ–ü—Ä–∏—à–ª–∏ –µ—â–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏, –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ù–∞–∑–∞–¥\""
    STATE_CONVERSATION = "ü§ñ–ù—É –¥–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º"
    STATE_TEXT_CHECK = "ü§ñ–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å"
    STATE_TEXT_CHECK_CONTINUE = "ü§ñ–ü—Ä–∏—à–ª–∏ –µ—â–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ù–∞–∑–∞–¥\""
    STATE_JOKE = "ü§ñ–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —á—Ç–æ–±—ã —è –ø–æ—à—É—Ç–∏–ª"
    STATE_JOKE_CONTINUE = "ü§ñ–ü—Ä–∏—à–ª–∏ —Ç–µ–º—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —à—É—Ç–∫–∏, –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ù–∞–∑–∞–¥\""
    CHOOSE_BUTTON = "ü§ñ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ"
    PLACEHOLDER = "ü§ñ–û—Ç–≤–µ—Ç-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞"
    COMMAND_UNKNOWN = ("ü§ñ–Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É –∫–æ–º–∞–Ω–¥—É /start "
                       "–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")


class State(Enum):
    TRANSLATION = 1
    TEXT_CHECK = 2
    CONVERSATION = 3
    STARTED = 4
    JOKE = 5


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=BotMessages.GREETINGS)
    buttons = [[KeyboardButton(Button.TRANSLATION)], [KeyboardButton(Button.TEXT_CHECK)],
               [KeyboardButton(Button.CONVERSATION)], [KeyboardButton(Button.JOKE)]]
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=BotMessages.STATE_STARTED,
                                   reply_markup=ReplyKeyboardMarkup(buttons))
    return State.STARTED


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text=BotMessages.COMMAND_UNKNOWN)


async def check_for_back_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if Button.BACK == update.message.text:
        await change_state(State.STARTED, update, context)
        return True
    return False


async def change_state(state: State, update: Update, context: ContextTypes.DEFAULT_TYPE):
    if state is State.STARTED:
        context.user_data[KEY_GPT_HISTORY] = []
        buttons = [[KeyboardButton(Button.TRANSLATION)], [KeyboardButton(Button.TEXT_CHECK)],
                   [KeyboardButton(Button.CONVERSATION)], [KeyboardButton(Button.JOKE)]]
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=BotMessages.STATE_STARTED,
                                       reply_markup=ReplyKeyboardMarkup(buttons))
    if state is State.TRANSLATION:
        context.user_data[KEY_GPT_HISTORY] = GPT_INITIAL_ASSISTANT_HISTORY
        buttons = [[KeyboardButton(Button.BACK)]]
        await context.bot.send_message(chat_id=update.effective_chat.id, text=BotMessages.STATE_TRANSLATION,
                                       reply_markup=ReplyKeyboardMarkup(buttons))
    if state is State.CONVERSATION:
        context.user_data[KEY_GPT_HISTORY] = GPT_INITIAL_CONVERSATION_HISTORY
        buttons = [[KeyboardButton(Button.BACK)]]
        await context.bot.send_message(chat_id=update.effective_chat.id, text=BotMessages.STATE_CONVERSATION,
                                       reply_markup=ReplyKeyboardMarkup(buttons))
    if state is State.TEXT_CHECK:
        context.user_data[KEY_GPT_HISTORY] = GPT_INITIAL_ASSISTANT_HISTORY
        buttons = [[KeyboardButton(Button.BACK)]]
        await context.bot.send_message(chat_id=update.effective_chat.id, text=BotMessages.STATE_TEXT_CHECK,
                                       reply_markup=ReplyKeyboardMarkup(buttons))
    if state is State.JOKE:
        context.user_data[KEY_GPT_HISTORY] = GPT_INITIAL_ASSISTANT_HISTORY
        buttons = [[KeyboardButton(Button.BACK)]]
        await context.bot.send_message(chat_id=update.effective_chat.id, text=BotMessages.STATE_JOKE,
                                       reply_markup=ReplyKeyboardMarkup(buttons))


async def handle_buttons_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    match update.message.text:
        case Button.TRANSLATION:
            await change_state(State.TRANSLATION, update, context)
            return State.TRANSLATION
        case Button.TEXT_CHECK:
            await change_state(State.TEXT_CHECK, update, context)
            return State.TEXT_CHECK
        case Button.CONVERSATION:
            await change_state(State.CONVERSATION, update, context)
            return State.CONVERSATION
        case Button.JOKE:
            await change_state(State.JOKE, update, context)
            return State.JOKE
        case _:
            await change_state(State.STARTED, update, context)
            return State.STARTED


async def translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_for_back_pressed(update, context):
        return State.STARTED

    await context.bot.send_chat_action(update.effective_chat.id, 'typing')

    if "ru" in detect_language_with_langdetect(update.message.text)[0]:
        translated_text = translate_from_russian(update.message.text, context)
    else:
        translated_text = translate_to_russian(update.message.text, context)

    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=translated_text)
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=BotMessages.STATE_TRANSLATION_CONTINUE)


def translate_from_russian(text_to_translate: str, context: ContextTypes.DEFAULT_TYPE):
    messages = context.user_data[KEY_GPT_HISTORY].copy()
    messages.append({"role": "user", "content": f'–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: "{text_to_translate}"'})
    completion = client.chat.completions.create(
        model=GPT_MODEL_TYPE,
        messages=messages
    )
    return completion.choices[0].message.content


def translate_to_russian(text_to_translate: str, context: ContextTypes.DEFAULT_TYPE):
    messages = context.user_data[KEY_GPT_HISTORY].copy()
    messages.append({"role": "user", "content": f'–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π: "{text_to_translate}"'})
    completion = client.chat.completions.create(
        model=GPT_MODEL_TYPE,
        messages=messages
    )
    return completion.choices[0].message.content


# noinspection PyBroadException
def detect_language_with_langdetect(line):
    try:
        langs = detect_langs(line)
        for item in langs:
            # The first one returned is usually the one that has the highest probability
            return item.lang, item.prob
    except:
        return "err", 0.0


async def conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_for_back_pressed(update, context):
        return State.STARTED

    await context.bot.send_chat_action(update.effective_chat.id, 'typing')
    context.user_data[KEY_GPT_HISTORY].append({"role": "user", "content": update.message.text})
    completion = client.chat.completions.create(
        model=GPT_MODEL_TYPE,
        messages=context.user_data[KEY_GPT_HISTORY]
    )
    context.user_data[KEY_GPT_HISTORY].append({"role": "assistant", "content": completion.choices[0].message.content})

    await context.bot.send_message(chat_id=update.effective_chat.id, text=completion.choices[0].message.content)


async def text_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_for_back_pressed(update, context):
        return State.STARTED

    await context.bot.send_chat_action(update.effective_chat.id, 'typing')

    messages = context.user_data[KEY_GPT_HISTORY].copy()
    messages.append({"role": "user", "content": f'–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –æ—à–∏–±–∫–∏: "{update.message.text}"'})
    completion = client.chat.completions.create(
        model=GPT_MODEL_TYPE,
        messages=messages
    )

    await context.bot.send_message(chat_id=update.effective_chat.id, text=completion.choices[0].message.content)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=BotMessages.STATE_TEXT_CHECK_CONTINUE)


async def joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_for_back_pressed(update, context):
        return State.STARTED

    await context.bot.send_chat_action(update.effective_chat.id, 'typing')

    messages = context.user_data[KEY_GPT_HISTORY].copy()
    messages.append({"role": "user", "content": f'–ù–∞–ø–∏—à–∏ –º–Ω–µ —à—É—Ç–∫—É –Ω–∞ —Ç–µ–º—É: "{update.message.text}"'})
    completion = client.chat.completions.create(
        model=GPT_MODEL_TYPE,
        messages=messages
    )

    await context.bot.send_message(chat_id=update.effective_chat.id, text=completion.choices[0].message.content)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=BotMessages.STATE_JOKE_CONTINUE)

if __name__ == '__main__':
    threading.Thread(target=run_server).start()
    application = ApplicationBuilder().token(os.environ.get('GPTBOT_API_KEY')).build()
    client = OpenAI()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.ALL, start)],
        states={
            State.STARTED: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons_pressed)],
            State.TRANSLATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, translate)],
            State.TEXT_CHECK: [MessageHandler(filters.TEXT & ~filters.COMMAND, text_check)],
            State.CONVERSATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, conversation)],
            State.JOKE: [MessageHandler(filters.TEXT & ~filters.COMMAND, joke)],
        },
        fallbacks=[
            CommandHandler("start", start),
            MessageHandler(filters.ALL, unknown)
        ],
    )

    application.add_handler(conv_handler)
    application.run_polling()
